#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
#define INF 1<<30
#define LINF 1LL<<60

/*
<url:http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0507>
問題文============================================================
同じ大きさの正方形の紙が n 枚ある.これらの紙の下部を水平に揃えて何列かに並べる.
ただし,隣り合う列は左側が右側より低くならないように並べなければならない.
例えば, n = 5 のときは,次のような 7 通りの並べ方が可能である.

(図略)

これらを,各列に並んだ正方形の個数の列で表すことにする.例えば, n = 5 の ときは,それぞれ,
(5) (4, 1) (3, 2) (3, 1, 1) (2, 2, 1) (2, 1, 1, 1) (1, 1, 1, 1, 1)
と表わされる.
n を入力したとき, 辞書式順序で全て出力するプログラムを作成せよ.n ≤30 とする.
ただし, 辞書式順序とは2つの並べ方 (a1, a2 , ..., as) が並べ方 (b1, b2, ..., bt )
に対して, a1 > b1 または, ある整数 i > 1 が存在して
a1 = b1 , ..., ai-1 = bi-1 かつ ai > bi が成り立つとき 
(a1, a2, ..., as) が (b1 , b2, ..., bt) より先に出力されるように並べることである.

入力データ は 1 行からなり,1 行目に n が書かれている.
=================================================================
入力=============================================================
入力は複数のデータセットからなる．n が 0 のとき入力が終了する．データセットの数は 5 を超えない．
================================================================
出力=============================================================
データセットごとに、辞書式順序で全て出力する．
================================================================
解説=============================================================
nが小さいので貪欲で間に合う, 辞書式順序最小の為,
ある i , i+1番目の列を見たとき, 条件を満たすようであれば
i+1番目の紙を追加することを優先し、
その後, i+2番目に新たに紙を追加する
================================================================
*/

void dfs(ll pre_n, ll n, vector<ll> v,vector<vector<ll>>& res) {
	if (n == 0) { res.push_back(v); return; }
	
	if (pre_n > v[v.size() - 1]) {
		v[v.size() - 1]++;
		dfs(pre_n, n - 1, v, res);
		v[v.size() - 1]--;
	}
	pre_n = v[v.size() - 1];
	v.push_back(1);
	dfs(pre_n, n - 1, v, res);
}
int main(void) {
	cin.tie(0); ios::sync_with_stdio(false);
	ll n;
	while (cin >> n, n) {
		vector<vector<ll>> res;
		for (int i = n;i > 0;i--) {
			vector<ll> v; v.push_back(i);
			dfs(i, n - i, v, res);
		}
		for (auto res_v : res) {
			for (int i = 0; i < res_v.size();i++) {
				if (i != 0) cout << " ";
				cout << res_v[i];
			}
			cout << endl;
		}
	}
	return 0;
}