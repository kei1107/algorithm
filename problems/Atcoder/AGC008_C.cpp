#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int INF = 1e9;
const ll LINF = 1e18;
template<class S,class T> ostream &operator << (ostream& out,const pair<S,T>& o){
    out << "(" << o.first << "," << o.second << ")"; return out;
}

/*
 <url:https://agc008.contest.atcoder.jp/tasks/agc008_c>
 問題文============================================================
 正方形のマスを 4 個繋げた形をテトロミノといいます。
 次の 7 種類のテトロミノを順に I, O, T, J, L, S, Z 型と呼ぶことにします。
 
 (図略)
 
 すぬけ君は I, O, T, J, L, S, Z 型のテトロミノをそれぞれ aI, aO, aT, aJ, aL, aS, aZ 個ずつ持っています。
 すぬけ君はこれらのテトロミノのうち K 個を組み合わせ、縦 2 マス、横 2K マスの長方形を作ろうとしています。
 このとき、すぬけ君は次のルールに従います。
 
 各テトロミノを置くとき、回転はできるが、反転はできない。
 長方形の各マスにはちょうど 1 個のテトロミノが置かれているようにする。
 長方形の外部にテトロミノが置かれていないようにする。
 
 すぬけ君はできるだけ大きい長方形を作ろうとしています。 K の最大値を求めてください。
 
 制約
 0≤aI,aO,aT,aJ,aL,aS,aZ≤109
 aI+aO+aT+aJ+aL+aS+aZ≥1
 =================================================================
 
 解説=============================================================
 
 まず、できる長方形は以下の形の組み合わせでしかない
 
 K+=1(O:1個)(1)  K+=3(I,J,L:１個)(2)   K+=2(J:2個 or L:2個)(3)   K+=2(I:2個)(4)
 ◽️◽️         ◽️ ◽️◽️◽️◽️ ◽️         ◽️ ◽️◽️◽️               ◽️◽️◽️◽️
 ◽️◽️         ◽️◽️◽️  ◽️◽️◽️         ◽️◽️◽️ ◽️               ◽️◽️◽️◽️
 
 ここで(2)のパターンは高々1回利用するか、しないかを選択すれば良い。
 ∵ （２）を2回利用すると (3)および（４）を利用した時の個数とKの増加分が一致するため
 
 よって、(2)を利用するかしないかを決めて
 あとは(3)および(4)を実行すれば良い
 
 ================================================================
 */

enum Tetromino { I,O,T,J,L,S,Z};
ll solve(){
    //    cout << I << " " << O << " " << T << " " << J << " " << L << " "<< S << " " << Z << endl;
    ll res = 0;
    ll a[7] = {};
    for(auto &in:a) cin >> in;
    res += a[O]; // (1)
    
    ll t1 = 0, t2 = 0;
    t1 += 2*(a[J]/2);// a[J]%=2;
    t1 += 2*(a[L]/2);// a[L]%=2;
    t1 += 2*(a[I]/2);// a[I]%=2;
    
    if(a[J] >= 1 && a[L] >= 1 && a[I] >= 1){
        t2 += 3; a[J]--; a[L]--; a[I]--;
        t2 += 2*(a[J]/2);// a[J]%=2;
        t2 += 2*(a[L]/2);// a[L]%=2;
        t2 += 2*(a[I]/2);// a[I]%=2;
    }
    
    res += max(t1,t2);
    return res;
}
int main(void) {
    cin.tie(0); ios::sync_with_stdio(false);
    cout << solve() << endl;
    return 0;
}
