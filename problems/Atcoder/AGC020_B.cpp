#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int INF = 1e9;
const ll LINF = 1e16;

/*
<url:https://agc020.contest.atcoder.jp/tasks/agc020_b>
問題文============================================================
スケートリンクで、一人の大人の司会と N 人の子供がゲームを行います。 
ゲームは K ラウンドからなり、ラウンド i では司会が次のように言います。

Ai 人組を作って！
すると、まだ脱落していない子供たちは Ai 人からなるグループをできるだけ多く組みます。
一人につき一つのグループにしか入れません。 
グループに入れなかった子供たちは脱落し、その他は次のラウンドに進みます。 ラウンドで誰も脱落しないこともありえます。

最後まで、つまりラウンド K のあとまで残ったのは 2 人で、彼らが勝者となりました。

あなたは A1, A2, ..., AK の値を聞き、N の値は知りませんが、推定してみたくなりました。

ゲームの開始前にいた子供たちの人数として考えられる最小の値と、最大の値を求めてください。
もしくは、考えられる N の値は存在しないと判定してください。
=================================================================

解説=============================================================

後ろからありうる範囲を復元していく

最初Akが2でなかったら　即座に-1
2であったら、そのとき、ありうる値のありうる範囲として 2~3
ここでl = 2, r = 3とする
次にAk-1を見る

Ak-1の倍数が (l,r) の範囲にあれば
次の l,rは
l = (l,r)内で最も小さいAk-1の倍数
r = (l,r)内で最も大きいAk-1の倍数 + Ak-1 - 1
となる。

あとは、A1までたどればおｋ

================================================================
*/
int main(void) {
	cin.tie(0); ios::sync_with_stdio(false);
	ll K; cin >> K;
	vector<ll> A(K);
	for (auto& in : A) cin >> in;
	if (A[K - 1] != 2) {
		cout << -1 << endl;
		return 0;
	}
	ll l = 2, r = 3;
	for (int i = K - 1; i >= 0; i--) {
		if (l / A[i] == r / A[i]) {
			if (l % A[i] != 0) {
				cout << -1 << endl;
				return 0;
			}
		}
		ll tmp1 = l / A[i];
		if (l%A[i] != 0) tmp1++;

		ll nextl = tmp1 * A[i];
		if (nextl > r) {
			cout << -1 << endl;
			return 0;
		}
		l = nextl;

		ll tmp2 = r / A[i];
		r = (tmp2 + 1)*A[i] - 1;
	}
	cout << l << " " << r << endl;
	return 0;
}
