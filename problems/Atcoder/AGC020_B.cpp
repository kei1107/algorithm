#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int INF = 1e9;
const ll LINF = 1e18;

/*
<url:https://agc020.contest.atcoder.jp/tasks/agc020_b>
問題文============================================================
 スケートリンクで、一人の大人の司会と N 人の子供がゲームを行います。
 ゲームは K ラウンドからなり、ラウンド i では司会が次のように言います。
 
 Ai 人組を作って！
 
 すると、まだ脱落していない子供たちは Ai 人からなるグループをできるだけ多く組みます。
 一人につき一つのグループにしか入れません。
 グループに入れなかった子供たちは脱落し、その他は次のラウンドに進みます。 ラウンドで誰も脱落しないこともありえます。
 
 最後まで、つまりラウンド K のあとまで残ったのは 2 人で、彼らが勝者となりました。
 
 あなたは A1, A2, ..., AK の値を聞き、N の値は知りませんが、推定してみたくなりました。
 
 ゲームの開始前にいた子供たちの人数として考えられる最小の値と、最大の値を求めてください。
 もしくは、考えられる N の値は存在しないと判定してください。
 

=================================================================

解説=============================================================

 後ろから考える
 
 後ろから考えた時、その時点での最小値と最大値を l,r とすると
 ここで A[i] を見た時 , l と　r の間に A[i]の倍数がなければ -1
 あれば
  l = (l + A[i] - 1)/A[i] * A[i]
  r = (r/A[i] + 1)*A[i] - 1
 となる
 
================================================================
*/
void solve(){
    ll K; cin >> K;
    vector<ll> A(K);
    for(auto &in:A) cin >> in;
    if(A[K-1] != 2){ cout << -1 << endl; return; }
    ll l = 2, r = 2;
    for(ll i = K - 1; i >= 0; i--){
        ll t = (l + A[i] - 1)/A[i] * A[i];
        if(t < l || t > r){
            cout << -1 << endl; return;
        }
        l = t;
        r = (r/A[i] + 1)*A[i] - 1;
    }
    cout << l << " " << r << endl;
}
int main(void) {
	cin.tie(0); ios::sync_with_stdio(false);
    solve();
	return 0;
}
