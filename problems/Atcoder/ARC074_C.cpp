#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
const int INF = 1e9;
const ll LINF = 1e18;

/*
<url:https://arc074.contest.atcoder.jp/tasks/arc074_a>
問題文============================================================
 縦 H ブロック、横 W ブロックの板チョコがあります。
 すぬけ君は、この板チョコをちょうど 3 つのピースに分割しようとしています。
 ただし、各ピースはブロックの境目に沿った長方形でなければなりません。
 
 すぬけ君は、3 つのピースの面積 (ブロック数) をできるだけ均等にしようとしています。
 具体的には、3 つのピースの面積の最大値を Smax、最小値を Smin としたとき、
 Smax−Smin を最小化しようとしています。 Smax−Smin の最小値を求めてください。

=================================================================

解説=============================================================
この問題は調べなければならない長方形の領域の取り方は４パターンしかない、
 それは、
     入力例１のような領域の取り方
     入力例１を90度回転させたような領域の取り方
     入力例２のような領域の取り方
     入力例３のような領域の取り方
 
 それぞれ、ある一つの領域を決めたら、残りの領域は、その領域を二分するようにすればいいので一意にもとまる。
 
 よって、４パターンそれぞれにおいてパターンを全探索して
 O(2*H + 2*W)
 でもとまる
================================================================
*/
int main(void) {
	cin.tie(0); ios::sync_with_stdio(false);
    ll H,W; cin >> H >> W;
    ll ans = LINF;
    /*
     パターン１
         サンプル１のようなパターン
     */
    for(int i = 1; i <= H - 2;i++){
        ll S1 = i*W;
        ll S2 = ((H - i)/2) * W;
        ll S3 = ((H - i) - (H - i)/2)*W;
        ans = min(ans,max({S1,S2,S3}) - min({S1,S2,S3}));
    }
    /*
     パターン２
         パターン１を90度回転させたパターン
     */
    for(int i = 1; i <= W - 2;i++){
        ll S1 = i*H;
        ll S2 = ((W - i)/2) * H;
        ll S3 = ((W - i) - (W - i)/2)*H;
        ans = min(ans,max({S1,S2,S3}) - min({S1,S2,S3}));
    }
    /*
     パターン3
         サンプル2のようなパターン
     */
    for(int i = 1; i <= W;i++){
        ll S1 = H*i;
        ll S2 = (H/2)*(W-i);
        ll S3 = (H - H/2)*(W-i);
        ans = min(ans,max({S1,S2,S3}) - min({S1,S2,S3}));
    }
    /*
     パターン４
         パターン３を90度回転させたパターン（サンプル３のようなパターン）
     */
    for(int i = 1; i <= H; i++){
        ll S1 = W*i;
        ll S2 = (W/2)*(H-i);
        ll S3 = (W - W/2)*(H-i);
        ans = min(ans,max({S1,S2,S3}) - min({S1,S2,S3}));
    }
    cout << ans << endl;
	return 0;
}
