#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
#define INF 1<<30
#define LINF 1LL<<60

/*
 <url:https://www.ioi-jp.org/joi/2013/2014-yo/2014-yo-t4/2014-yo-t4.html>
 問題文============================================================
 IOI 高校のプログラミング部には，J 君と O 君と I 君の 3 人の部員がいる.
 プログラミング部では，部活のスケジュールを組もうとしている．
 今，N 日間の活動のスケジュールを決めようとしている．
 各活動日のスケジュールとして考えられるものは，
 各部員については活動に参加するかどうかの 2 通りがあり，部としては全部で 8 通りある．
 部室の鍵はただ 1 つだけであり，最初は J 君が持っている．
 各活動日には，その日の活動に参加する部員のうちのいずれか 1 人が鍵を持っている必要があり，
 活動後に参加した部員のいずれかが鍵を持って帰る．
 
 プログラミング部では，活動日には毎回必ず活動が行われるように，
 あらかじめ各活動日の責任者を定めた．
 責任者は，必ずその日の活動に出席しなければならない．
 
 スケジュールを決めようとしている日数と，各活動日の責任者が誰であるかの情報が与えられた時，
 すべての活動日に部活動を行うことができるようなスケジュール表として考えられるものの数を
 10007 で割った余りを求めるプログラムを作成せよ．
 ただし，部活の終了時に鍵を持って帰る部員は，その日の活動に参加している部員の誰でもよく，
 最終日は誰が鍵を持って帰ってもよいものとする．
 =================================================================
 解説=============================================================
 
 dp[i][j] := i日目にj(3ビットマスクに対応)が活動に参加した時の総数
 であり、
 
 dp[i][j] = Σ(dp[i-1][k])
 (ただし、jにはその日の担当者のビットが必ず立っており、かつ、k^j > 0 となるk)
 ================================================================
 */

const ll MOD =10007;
int main(void) {
    cin.tie(0); ios::sync_with_stdio(false);
    ll N; cin >> N;
    string S; cin >> S;
    vector<vector<ll>> dp(N+1,vector<ll>(1<<3,0));
    dp[0][1] = 1;
    for(int i = 1; i <= N;i++){
        ll a;
        if(S[i-1] == 'J')a = 0;
        else if(S[i-1] == 'O') a = 1;
        else a = 2;
        for(int j = 1; j < (1<<3);j++){
            if(!(j & (1<<a)))continue;
            for(int k = 1; k <=(1<<3);k++){
                if(!(k&j))continue;
                (dp[i][j] += dp[i-1][k])%=MOD;
            }
        }
    }
    ll res = 0;
    for(int i = 1; i < (1<<3);i++){
        (res += dp[N][i])%=MOD;
    }
    cout << res << endl;
    return 0;
}
